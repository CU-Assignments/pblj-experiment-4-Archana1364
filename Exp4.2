import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private boolean[] seats;
    private Lock lock = new ReentrantLock();

    public TicketBookingSystem(int totalSeats) {
        seats = new boolean[totalSeats];
    }

    public void bookSeat(int seatNumber, String customerName) {
        lock.lock();
        try {
            if (seatNumber < 0 || seatNumber >= seats.length) {
                System.out.println(customerName + " attempted to book an invalid seat: " + seatNumber);
                return;
            }
            
            if (!seats[seatNumber]) {
                seats[seatNumber] = true;
                System.out.println(customerName + " successfully booked seat " + seatNumber);
            } else {
                System.out.println(customerName + " attempted to book an already booked seat: " + seatNumber);
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem bookingSystem;
    private int seatNumber;
    private String customerName;

    public BookingThread(TicketBookingSystem bookingSystem, int seatNumber, String customerName, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customerName = customerName;
        this.setPriority(priority);
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customerName);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        int totalSeats = 10;
        TicketBookingSystem bookingSystem = new TicketBookingSystem(totalSeats);
        
        Thread vip1 = new BookingThread(bookingSystem, 3, "VIP John", Thread.MAX_PRIORITY);
        Thread vip2 = new BookingThread(bookingSystem, 5, "VIP Alice", Thread.MAX_PRIORITY);
        Thread user1 = new BookingThread(bookingSystem, 3, "User Bob", Thread.NORM_PRIORITY);
        Thread user2 = new BookingThread(bookingSystem, 5, "User Charlie", Thread.NORM_PRIORITY);
        Thread user3 = new BookingThread(bookingSystem, 7, "User Dave", Thread.MIN_PRIORITY);
        
        vip1.start();
        vip2.start();
        user1.start();
        user2.start();
        user3.start();
    }
}
